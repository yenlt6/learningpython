class BankAccount:
    def __init__(self, account_number, account_name, balance=0):
        self._account_number = account_number
        self._account_name = account_name

        # G·ªçi set_balance ƒë·ªÉ validate
        # thay v√¨ self._balance = balance
        self.set_balance(balance)

    def get_account_number(self):
        return self._account_number

    def get_account_name(self):
        return self._account_name

    def get_balance(self):
        return self._balance

    def set_balance(self, balance):
        if balance >= 0:
            self._balance = balance
        else:
            # raise ph√°t ra m·ªôt ngo·∫°i l·ªá (l·ªói)
            # T·∫°m th·ªùi ch·∫•p nh·∫≠n s·ª≠ d·ª•ng print
            raise ValueError("S·ªë d∆∞ ph·∫£i l·ªõn h∆°n 0")

    def display(self):
        # Khi s·ª≠ d·ª•ng getter v√† setter, c√°c ph∆∞∆°ng th·ª©c kh√°c c·∫ßn truy c·∫≠p
        # thu·ªôc t√≠nh c≈©ng n√™n g·ªçi qua getter v√† setter
        print(self.get_account_number(),
              self.get_account_name(), self.get_balance(), "‚Ç´")

    def withdraw(self, amount):
        if 0 < amount <= self.get_balance():
            self.set_balance(self.get_balance() - amount)
        else:
            raise ValueError(
                "S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0 v√† kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° s·ªë d∆∞ hi·ªán t·∫°i")

    def deposit(self, amount):
        if amount > 0:
            self.set_balance(self.get_balance() + amount)
        else:
            raise ValueError("S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0")


my_account = BankAccount(1, "Ba", 1_000_000_000_000_000_000)
my_account.deposit(1_000_000_000_000_000_000)
my_account.display()

my_account.withdraw(100_000_000)  # qu√° nh·ªè b√© üòä
my_account.display()
